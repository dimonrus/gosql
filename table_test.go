package gosql

import "testing"

func TestTable_String(t *testing.T) {
	t.Run("simple", func(t *testing.T) {
		// CREATE TABLE films (
		//    code        char(5) CONSTRAINT firstkey PRIMARY KEY,
		//    title       varchar(40) NOT NULL,
		//    did         integer NOT NULL,
		//    date_prod   date,
		//    kind        varchar(10),
		//    len         interval hour to minute
		// );
		films := CreateTable("films")
		films.AddColumn("code").SetType("char(5)").Constraint().SetName("firstkey").SetPrimary()
		films.AddColumn("title").SetType("varchar(40)").Constraint().NotNull()
		films.AddColumn("did").SetType("integer").Constraint().NotNull()
		films.AddColumn("date_prod").SetType("date")
		films.AddColumn("kind").SetType("varchar(10)")
		films.AddColumn("len").SetType("interval hour to minute")
		t.Log(films.String())
		if films.String() != "CREATE TABLE films (code char(5) CONSTRAINT firstkey PRIMARY KEY, title varchar(40) NOT NULL, did integer NOT NULL, date_prod date, kind varchar(10), len interval hour to minute);" {
			t.Fatal("films table wrong query")
		}

		// CREATE TABLE distributors (
		//     did    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		//     name   varchar(40) NOT NULL CHECK (name <> '')
		// );
		distributors := CreateTable("distributors")
		did := distributors.AddColumn("did").SetType("integer")
		did.Constraint().SetPrimary()
		did.Constraint().Generated().SetDetail(GeneratedByDefault)
		name := distributors.AddColumn("name").SetType("varchar(40)")
		name.Constraint().NotNull()
		name.Constraint().Check().Expression().Add("name <> ''")
		t.Log(distributors.String())
		if distributors.String() != `CREATE TABLE distributors (did integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(40) NOT NULL CHECK (name <> ''));` {
			t.Fatal("wrong distributors query")
		}

		// CREATE TABLE array_int (
		//    vector  int[][]
		// );
		arrayInt := CreateTable("array_int")
		arrayInt.AddColumn("vector").SetType("int[][]")
		t.Log(arrayInt.String())
		if arrayInt.String() != "CREATE TABLE array_int (vector int[][]);" {
			t.Fatal("wrong array_int query")
		}
	})
	t.Run("constraint", func(t *testing.T) {
		// CREATE TABLE films (
		//    code        char(5),
		//    title       varchar(40),
		//    did         integer,
		//    date_prod   date,
		//    kind        varchar(10),
		//    len         interval hour to minute,
		//    CONSTRAINT production UNIQUE(date_prod)
		// );
		films := CreateTable("films")
		films.AddColumn("code").SetType("char(5)")
		films.AddColumn("title").SetType("varchar(40)")
		films.AddColumn("did").SetType("integer")
		films.AddColumn("date_prod").SetType("date")
		films.AddColumn("kind").SetType("varchar(10)")
		films.AddColumn("len").SetType("interval hour to minute")
		films.AddConstraint().SetName("production").Unique().Columns().Add("date_prod")
		t.Log(films.String())
		if films.String() != "CREATE TABLE films (code char(5), title varchar(40), did integer, date_prod date, kind varchar(10), len interval hour to minute, CONSTRAINT production UNIQUE (date_prod));" {
			t.Fatal("constraint films table wrong query")
		}
	})

	t.Run("check", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    did     integer CHECK (did > 100),
		//    name    varchar(40)
		// );
		distributors := CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer").Constraint().Check().Expression().Add("did > 100")
		distributors.AddColumn("name").SetType("varchar(40)")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer CHECK (did > 100), name varchar(40));" {
			t.Fatal("wrong check distributors query")
		}
	})

	t.Run("check_table", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    did     integer,
		//    name    varchar(40),
		//    CONSTRAINT con1 CHECK (did > 100 AND name <> '')
		// );
		distributors := CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer")
		distributors.AddColumn("name").SetType("varchar(40)")
		distributors.AddConstraint().SetName("con1").
			Check().
			AddExpression("did > 100").
			AddExpression("name <> ''")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer, name varchar(40), CONSTRAINT con1 CHECK (did > 100 AND name <> ''));" {
			t.Fatal("wrong check distributors query")
		}
	})

	t.Run("constraint_primary_key", func(t *testing.T) {
		// CREATE TABLE films (
		//    code        char(5),
		//    title       varchar(40),
		//    did         integer,
		//    date_prod   date,
		//    kind        varchar(10),
		//    len         interval hour to minute,
		//    CONSTRAINT code_title PRIMARY KEY(code,title)
		// );
		films := CreateTable("films")
		films.AddColumn("code").SetType("char(5)")
		films.AddColumn("title").SetType("varchar(40)")
		films.AddColumn("did").SetType("integer")
		films.AddColumn("date_prod").SetType("date")
		films.AddColumn("kind").SetType("varchar(10)")
		films.AddColumn("len").SetType("interval hour to minute")
		films.AddConstraint().SetName("code_title").PrimaryKey().Columns().Add("code", "title")
		t.Log(films.String())
		if films.String() != "CREATE TABLE films (code char(5), title varchar(40), did integer, date_prod date, kind varchar(10), len interval hour to minute, CONSTRAINT code_title PRIMARY KEY (code, title));" {
			t.Fatal("wrong films constraint_primary_key")
		}
	})

	t.Run("primary_key_column", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    did     integer,
		//    name    varchar(40),
		//    PRIMARY KEY(did)
		// );
		distributors := CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer")
		distributors.AddColumn("name").SetType("varchar(40)")
		distributors.AddConstraint().PrimaryKey().Columns().Add("did")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer, name varchar(40), PRIMARY KEY (did));" {
			t.Fatal("wrong primary_key_column constraint")
		}
		// CREATE TABLE distributors (
		//    did     integer PRIMARY KEY,
		//    name    varchar(40)
		// );
		distributors = CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer").Constraint().SetPrimary()
		distributors.AddColumn("name").SetType("varchar(40)")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer PRIMARY KEY, name varchar(40));" {
			t.Fatal("wrong primary_key_column column")
		}
	})

	t.Run("literal_default_constraint", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    name      varchar(40) DEFAULT 'Luso Films',
		//    did       integer DEFAULT nextval('distributors_serial'),
		//    modtime   timestamp DEFAULT current_timestamp
		// );
		distributors := CreateTable("distributors")
		distributors.AddColumn("name").SetType("varchar(40)").Constraint().SetDefault("'Luso Films'")
		distributors.AddColumn("did").SetType("integer").Constraint().SetDefault("nextval('distributors_serial')")
		distributors.AddColumn("modtime").SetType("timestamp").Constraint().SetDefault("current_timestamp")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (name varchar(40) DEFAULT 'Luso Films', did integer DEFAULT nextval('distributors_serial'), modtime timestamp DEFAULT current_timestamp);" {
			t.Fatal("wrong literal_default_constraint")
		}
	})

	t.Run("not_null", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    did     integer CONSTRAINT no_null NOT NULL,
		//    name    varchar(40) NOT NULL
		// );
		distributors := CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer").Constraint().SetName("no_null").NotNull()
		distributors.AddColumn("name").SetType("varchar(40)").Constraint().NotNull()
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer CONSTRAINT no_null NOT NULL, name varchar(40) NOT NULL);" {
			t.Fatal("wrong not_null")
		}
	})

	t.Run("unique", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    did     integer,
		//    name    varchar(40) UNIQUE
		// );
		distributors := CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer")
		distributors.AddColumn("name").SetType("varchar(40)").Constraint().SetUnique()
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer, name varchar(40) UNIQUE);" {
			t.Fatal("wrong unique column")
		}

		// CREATE TABLE distributors (
		//    did     integer,
		//    name    varchar(40),
		//    UNIQUE(name)
		// );
		distributors = CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer")
		distributors.AddColumn("name").SetType("varchar(40)")
		distributors.AddConstraint().Unique().Columns().Add("name")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer, name varchar(40), UNIQUE (name));" {
			t.Fatal("wrong unique constraint")
		}
	})

	t.Run("fillfactor", func(t *testing.T) {
		// CREATE TABLE distributors (
		//    did     integer,
		//    name    varchar(40),
		//    UNIQUE(name) WITH (fillfactor=70)
		// )
		// WITH (fillfactor=70);
		distributors := CreateTable("distributors")
		distributors.AddColumn("did").SetType("integer")
		distributors.AddColumn("name").SetType("varchar(40)")
		unique := distributors.AddConstraint().Unique()
		unique.Columns().Add("name")
		unique.IndexParameters().With().Add("fillfactor=70")
		distributors.With().Expression().Add("fillfactor=70")
		t.Log(distributors.String())
		if distributors.String() != "CREATE TABLE distributors (did integer, name varchar(40), UNIQUE (name) WITH (fillfactor=70)) WITH (fillfactor=70);" {
			t.Fatal("wrong unique fillfactor")
		}
	})

	t.Run("excluding", func(t *testing.T) {
		// CREATE TABLE circles (
		//    c circle,
		//    EXCLUDE USING gist (c WITH &&)
		// );
		circles := CreateTable("circles")
		circles.AddColumn("c").SetType("circle")
		exclude := circles.AddConstraint().Exclude().SetUsing("gist")
		exclude.ExcludeElement().Expression().Add("c")
		exclude.With().Add("&&")
		t.Log(circles.String())
		if circles.String() != "CREATE TABLE circles (c circle, EXCLUDE USING gist ((c) WITH &&));" {
			t.Fatal("wrong excluding")
		}
	})

	t.Run("tablespace", func(t *testing.T) {
		// CREATE TABLE cinemas (
		//        id serial,
		//        name text,
		//        location text
		// ) TABLESPACE diskvol1;
		cinemas := CreateTable("cinemas")
		cinemas.AddColumn("id").SetType("serial")
		cinemas.AddColumn("name").SetType("text")
		cinemas.AddColumn("location").SetType("text")
		cinemas.SetTableSpace("diskvol1")
		t.Log(cinemas.String())
		if cinemas.String() != "CREATE TABLE cinemas (id serial, name text, location text) TABLESPACE diskvol1;" {
			t.Fatal("wrong tablespace")
		}
	})

	t.Run("composite_type", func(t *testing.T) {
		// CREATE TYPE employee_type AS (name text, salary numeric);
		//
		// CREATE TABLE employees OF employee_type (
		//    PRIMARY KEY (name),
		//    salary WITH OPTIONS DEFAULT 1000
		// );
		employees := CreateTable("employees")
		employees.OfType().SetName("employee_type")
		employees.OfType().Columns().AddColumn("name").Constraint().SetPrimary()
		salary := employees.OfType().Columns().AddColumn("salary")
		salary.Constraint().SetDefault("1000")
		salary.WithOptions()
		t.Log(employees.String())
		if employees.String() != "CREATE TABLE employees OF employee_type (name PRIMARY KEY, salary WITH OPTIONS DEFAULT 1000);" {
			t.Fatal("wrong composite_type")
		}
	})

	t.Run("partition_by_range", func(t *testing.T) {
		// CREATE TABLE measurement (
		//    logdate         date not null,
		//    peaktemp        int,
		//    unitsales       int
		//) PARTITION BY RANGE (logdate);
		measurement := CreateTable("measurement")
		measurement.AddColumn("logdate").SetType("date").Constraint().NotNull()
		measurement.AddColumn("peaktemp").SetType("int")
		measurement.AddColumn("unitsales").SetType("int")
		measurement.Partition().By(PartitionByRange).Clause("logdate")
		t.Log(measurement.String())
		if measurement.String() != "CREATE TABLE measurement (logdate date NOT NULL, peaktemp int, unitsales int) PARTITION BY RANGE (logdate);" {
			t.Fatal("rwong partition_by_range")
		}

		// CREATE TABLE measurement_year_month (
		//    logdate         date not null,
		//    peaktemp        int,
		//    unitsales       int
		//) PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate));
		measurement = CreateTable("measurement_year_month")
		measurement.AddColumn("logdate").SetType("date").Constraint().NotNull()
		measurement.AddColumn("peaktemp").SetType("int")
		measurement.AddColumn("unitsales").SetType("int")
		measurement.Partition().By(PartitionByRange).Clause("EXTRACT(YEAR FROM logdate)", "EXTRACT(MONTH FROM logdate)")
		t.Log(measurement.String())
		if measurement.String() != "CREATE TABLE measurement_year_month (logdate date NOT NULL, peaktemp int, unitsales int) PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate));" {
			t.Fatal("rwong partition_by_range")
		}
	})

	t.Run("partition_by_hash", func(t *testing.T) {
		// CREATE TABLE orders (
		//    order_id     bigint not null,
		//    cust_id      bigint not null,
		//    status       text
		// ) PARTITION BY HASH (order_id);
		orders := CreateTable("orders")
		orders.AddColumn("order_id").SetType("bigint").Constraint().NotNull()
		orders.AddColumn("cust_id").SetType("bigint").Constraint().NotNull()
		orders.AddColumn("status").SetType("text")
		orders.Partition().By(PartitionByHash).Clause("order_id")
		t.Log(orders.String())
		if orders.String() != "CREATE TABLE orders (order_id bigint NOT NULL, cust_id bigint NOT NULL, status text) PARTITION BY HASH (order_id);" {
			t.Fatal("wrong partition_by_hash")
		}
	})

	t.Run("partition_of", func(t *testing.T) {
		// CREATE TABLE measurement_y2016m07
		//    PARTITION OF measurement (
		//    unitsales DEFAULT 0
		// ) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
		measurement := CreateTable("measurement_y2016m07")
		measurement.OfPartition().SetParent("measurement")
		measurement.OfPartition().Columns().AddColumn("unitsales").Constraint().SetDefault("0")
		measurement.OfPartition().Values().From().Add("'2016-07-01'")
		measurement.OfPartition().Values().To().Add("'2016-08-01'")
		t.Log(measurement.String())
		if measurement.String() != "CREATE TABLE measurement_y2016m07 PARTITION OF measurement (unitsales DEFAULT 0) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');" {
			t.Fatal("wrong partition_of for values")
		}

		// CREATE TABLE measurement_ym_older
		//    PARTITION OF measurement_year_month
		//    FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11);
		measurement = CreateTable("measurement_ym_older")
		measurement.OfPartition().SetParent("measurement_year_month")
		measurement.OfPartition().Values().From().Add(PartitionBoundFromMin, PartitionBoundFromMin)
		measurement.OfPartition().Values().To().Add("2016", "11")
		t.Log(measurement.String())
		if measurement.String() != "CREATE TABLE measurement_ym_older PARTITION OF measurement_year_month FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11);" {
			t.Fatal("wrong partition_of minvalue")
		}

		// CREATE TABLE cities_ab
		//    PARTITION OF cities (
		//    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
		// ) FOR VALUES IN ('a', 'b');
		cities := CreateTable("cities_ab")
		cities.OfPartition().SetParent("cities")
		cities.OfPartition().Columns().AddConstraint().SetName("city_id_nonzero").Check().AddExpression("city_id != 0")
		cities.OfPartition().Values().In().Add("'a'", "'b'")
		t.Log(cities.String())
		if cities.String() != "CREATE TABLE cities_ab PARTITION OF cities (CONSTRAINT city_id_nonzero CHECK (city_id != 0)) FOR VALUES IN ('a', 'b');" {
			t.Fatal("wrong partition_of cities_ab for values")
		}

		// CREATE TABLE cities_ab
		//    PARTITION OF cities (
		//    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
		// ) FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population);
		cities = CreateTable("cities_ab")
		cities.OfPartition().SetParent("cities")
		cities.OfPartition().Columns().AddConstraint().SetName("city_id_nonzero").Check().AddExpression("city_id != 0")
		cities.OfPartition().Values().In().Add("'a'", "'b'")
		cities.Partition().By(PartitionByRange).Clause("population")
		t.Log(cities.String())
		if cities.String() != "CREATE TABLE cities_ab PARTITION OF cities (CONSTRAINT city_id_nonzero CHECK (city_id != 0)) FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population);" {
			t.Fatal("wrong partition_of cities_ab")
		}

		// CREATE TABLE cities_ab_10000_to_100000
		//    PARTITION OF cities_ab FOR VALUES FROM (10000) TO (100000);
		citiesAb := CreateTable("cities_ab_10000_to_100000")
		citiesAb.OfPartition().SetParent("cities_ab").Values().From().Add("10000")
		citiesAb.OfPartition().SetParent("cities_ab").Values().To().Add("100000")
		t.Log(citiesAb.String())
		if citiesAb.String() != "CREATE TABLE cities_ab_10000_to_100000 PARTITION OF cities_ab FOR VALUES FROM (10000) TO (100000);" {
			t.Fatal("wrong partition_of cities_ab")
		}

		// CREATE TABLE orders_p1 PARTITION OF orders
		//    FOR VALUES WITH (MODULUS 4, REMAINDER 0);
		ordersP1 := CreateTable("orders_p1")
		ordersP1.OfPartition().SetParent("orders")
		ordersP1.OfPartition().Values().With().Add(PartitionBoundWithModulus+" 4", PartitionBoundWithRemainder+" 0")
		t.Log(ordersP1.String())
		if ordersP1.String() != "CREATE TABLE orders_p1 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 0);" {
			t.Fatal("wrong partition_of orders_p1")
		}

		// CREATE TABLE orders_p2 PARTITION OF orders
		//    FOR VALUES WITH (MODULUS 4, REMAINDER 1);
		ordersP2 := CreateTable("orders_p1")
		ordersP2.OfPartition().SetParent("orders")
		ordersP2.OfPartition().Values().With().Add(PartitionBoundWithModulus+" 4", PartitionBoundWithRemainder+" 1")
		t.Log(ordersP2.String())
		if ordersP2.String() != "CREATE TABLE orders_p1 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 1);" {
			t.Fatal("wrong partition_of orders_p2")
		}

		// CREATE TABLE cities_partdef
		//    PARTITION OF cities DEFAULT;
		citiesPartdef := CreateTable("cities_partdef")
		citiesPartdef.OfPartition().SetParent("cities")
		t.Log(citiesPartdef.String())
		if citiesPartdef.String() != "CREATE TABLE cities_partdef PARTITION OF cities DEFAULT;" {
			t.Fatal("wrong partition_of cities_partdef")
		}
	})
}
