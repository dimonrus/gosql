package gosql

// where add action is one of:
//
// ADD [ COLUMN ] [ IF NOT EXISTS ] column_name data_type [ COLLATE collation ] [ column_constraint [ ... ] ]
// ADD GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ ( sequence_options ) ]
// ADD table_constraint [ NOT VALID ]
// ADD table_constraint_using_index
type alterTableActionAdd struct {
	// ordered expression
	ordered orderedExpression
	// column
	column column
	// table constraint
	tableConstrain constraintTable
	// table constraint using index
	tableConstrainUsingIndex constraintTableUsingIndex
}

// Column add column
func (a *alterTableActionAdd) Column(name string, dataType string) *column {
	return a.column.Name(name).Type(dataType)
}

// IfNotExists is not exists
func (a *alterTableActionAdd) IfNotExists() *alterTableActionAdd {
	a.ordered.Add(1, a.ordered.Concat("IF NOT EXISTS"))
	return a
}

// NotValid table constraint
func (a *alterTableActionAdd) NotValid() *alterTableActionAdd {
	a.ordered.Add(1, a.ordered.Concat("NOT VALID"))
	return a
}

// GeneratedAlways add GENERATED ALWAYS
func (a *alterTableActionAdd) GeneratedAlways() *alterTableActionAdd {
	a.ordered.Add(0, a.ordered.Concat("ADD GENERATED ALWAYS"))
	return a
}

// GeneratedByDefault add GENERATED BY DEFAULT
func (a *alterTableActionAdd) GeneratedByDefault() *alterTableActionAdd {
	a.ordered.Add(0, a.ordered.Concat("ADD GENERATED BY DEFAULT"))
	return a
}

// AsIdentity add sequence options
func (a *alterTableActionAdd) AsIdentity(options string) *alterTableActionAdd {
	a.ordered.Add(1, a.ordered.Concat("AS IDENTITY ", options))
	return a
}

// TableConstraint return table constraint
func (a *alterTableActionAdd) TableConstraint() *constraintTable {
	return &a.tableConstrain
}

// TableConstraintUsingIndex return table constraint using index
func (a *alterTableActionAdd) TableConstraintUsingIndex() *constraintTableUsingIndex {
	return &a.tableConstrainUsingIndex
}

// IsEmpty check if empty
func (a *alterTableActionAdd) IsEmpty() bool {
	return a == nil || a.ordered.IsEmpty() && a.column.IsEmpty() && a.tableConstrain.IsEmpty() && a.tableConstrainUsingIndex.IsEmpty()
}

// Reset reset item data
func (a *alterTableActionAdd) Reset() *alterTableActionAdd {
	a.ordered.Reset()
	return a
}

// Grow memory
func (a *alterTableActionAdd) Grow(n int) *alterTableActionAdd {
	a.ordered.Grow(n)
	return a
}

// GetArguments get arguments
func (a *alterTableActionAdd) GetArguments() []any {
	return a.ordered.GetArguments()
}

// String render alter table query
func (a *alterTableActionAdd) String() string {
	if a.IsEmpty() {
		return ""
	}
	if !a.column.IsEmpty() {
		a.ordered.Add(0, a.ordered.Concat("ADD COLUMN"))
		a.ordered.Add(2, a.ordered.Concat(a.column.String()))
	}
	if !a.tableConstrain.IsEmpty() {
		a.ordered.Add(0, a.ordered.Concat("ADD ", a.tableConstrain.String()))
	}
	if !a.tableConstrainUsingIndex.IsEmpty() {
		a.ordered.Add(0, a.ordered.Concat("ADD ", a.tableConstrainUsingIndex.String()))
	}
	return a.ordered.String()
}
